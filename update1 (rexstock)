import battlecode
import sys
import traceback
import random #Will eventually be removed

#Creates a game controller to connect to a running game
gc=battlecode.GameController() 

#A function that initializes the workers dictionary
def initialize_workers(gc):
	miners={}
	builders={}
	for worker in gc.my_units(): #Loops through all available workers in the range 1 to 3
		if len(builders)==0: #The first worker is tasked to build
			builders[worker.id]=1
		else: #The second and third workers are tasked with mining
			miners[worker.id]=1
	return miners, builders

#All enumerated data types are stored as lists to access in the futuredirections=list(battlecode.Direction) 
directions=list(battlecode.Direction)
planets=list(battlecode.Planet) #May be unnecessary

#Stores our teams color
my_team=gc.team()

#Random seeding for testing. Will be removed
random.seed(1)

#Counter for what round we are on
round=0

#Establishes the full research queue for the entire game
gc.queue_research(battlecode.UnitType.Knight) #25 turns. Put second because it quickly gives us a combat advantage
gc.queue_research(battlecode.UnitType.Mage) #25 turns. Put second because it quickly gives us a combat advantage
gc.queue_research(battlecode.UnitType.Rocket) #100 turns. Put third because of the time it takes to get to Mars at 100 turns
gc.queue_research(battlecode.UnitType.Worker) #25 turns
gc.queue_research(battlecode.UnitType.Mage) #75 turns
gc.queue_research(battlecode.UnitType.Mage) #100 turns
gc.queue_research(battlecode.UnitType.Mage) #200 turns
gc.queue_research(battlecode.UnitType.Healer) #25 turns
gc.queue_research(battlecode.UnitType.Rocket) #100 turns. Speeds up travel time which we need if we are not on Mars yet

#Dictionaries of units and whether or not they are alive (0,1) that will be updated each turn
factories={}
healers={}
knights={}
mages={}
rangers={}
rockets={}
miners, builders=initialize_workers(gc) #Initially filled with initialize_workers function

#List of all active squads and whether or not all units in it have been destroyed
squads=[]

while True:
    #Running the game
    try:
        pass
   
    #Tells us where the error occured
    except Exception:
        print('Error:', Exception)
        traceback.print_exc()

    #Send the actions we have performed and wait for the next turn
    gc.next_turn()

	#Write all actions to the manager
    sys.stdout.flush()
    sys.stderr.flush()
		
	
